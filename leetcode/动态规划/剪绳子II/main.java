package 剪绳子II;
/* 
 * 给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m - 1] 。
 * 请问 k[0]k[1]...*k[m - 1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。

答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。

2 <= n <= 1000
 */


 /* 
  * 从题目来看,和I最大的区别是数据范围变大了。其他一样，使用dp的话，就只能通过bigint的方法去做，比较麻烦
  * 贪心算法没有数据溢出
  */
public class main {
    public int cuttingRope(int n) {
        if (n == 2) {
            return 1;
        }
        if (n == 3) {
            return 2;
        }
        int mod = int(1e9+7);
        long res = 1;
        while (n>4) {
            //更具数学算法，拆分成3想乘为最优最大
            res*=3;
            res%=mod;
            n-=3;
        }
        return (int)(res*n%mod);
    }
}
