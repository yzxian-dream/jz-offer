package 完全平方数;
/*
 * 给你一个整数 n ，返回 和为 n 的完全平方数的最少数量 。

完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。

 

示例 1：

输入：n = 12
输出：3 
解释：12 = 4 + 4 + 4
示例 2：

输入：n = 13
输出：2
解释：13 = 4 + 9
 
提示：

1 <= n <= 104
 */
/*
 *  # dp[i]：表示完全平方数和为i的 最小个数
    # 初始状态dp[i]均取最大值i，即 1+1+...+1，i个1; dp[0] = 0
    # dp[i] = min(dp[i], dp[i-j*j]+1)，其中, j是平方数, j=1~k,其中k*k要保证 <= i
    # 意思就是：完全平方数和为i的 最小个数 等于 当前完全平方数和为i的 最大个数
    #   与 （完全平方数和为 i - j * j 的 最小个数 + 完全平方数和为 j * j的 最小个数）
    #   可以看到 dp[j*j] 是等于1的
 */
class Solution {
    public int numSquares(int n) {
        int[] dp = new int[n+1];
        for (int i = 1; i <= n; i++) {
            //最坏情况下就是用最小的完全平方数1来全部相加，这种情况个数是最多的
            dp[i] = i;
            //在上面获得最大个数相加的情况下我们继续探索更少完全平方数相加的情况
            //i-j*j>0是循环终止条件
            for (int j = 1; i-j*j>=0; j++) {
                //因为dp[j * j] = 1（这是一定的，不如j=4,dp[16]就只需要16这一个完全平方数就可以表示） 所以dp[i] = 1 + dp[i - j * j]，所以要加上这个1；
                dp[i] = Math.min(dp[i],dp[i-j*j]+1);
            }
        }
        return dp[n];
    }
}
